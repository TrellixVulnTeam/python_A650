Virtual Environment:
 	Create virtual environment ------>   python -m venv py3Env 
	Activate ------> call py3Env\Scripts\activate
-------------------------------------------------------------------------------------------------------------------
Records created in last 30 minutes:
	
	import datetime
	
	created_at >= datetime.datetime.now(tz=timezone.utc) - datetime.timedelta(seconds=60 * 30))
	from datetime import datetime, timedelta, timezone, tzinfo
--------------------------------------------------------------------------------------------------------------------
CRUD
	ClassName.objects.exclude(field1="value for field1")
	Updating an existing record
		c= ClassName.objects.get(id=1)
		c.field_name = "some new value for field_name"
		c.save()
	Deleting an existing record
		c = ClassName.objects.get(id=1)
		c.delete()
	Ordering records
		ClassName.objects.all().order_by("field_name") - orders by field provided, ascending
		ClassName.objects.all().order_by("-field_name") - orders by field provided, descending
----------------------------------------------------------------------------------------------------------------
Routing with parameters
	[] - matches any value in a range
	Example: '[a-z]' matches 'abc' and 'xyz' but not 'b7' or 'ABC'
	\d+ - matches digits with at least one digit
	Example: '\d+' matches '8' and '876' but not '5c' or ''
	\w+ - matches a string with at least one character (including numbers, excluding special characters)
	Example: '\w+' matches '8' and 'abc123' but not 'a!' or ''
	{n} - matches n number of repetitions of the preceding pattern
	Example: '[0-9]{2}' matches '36' but not '876' or '2'

	url(r'^bears$', views.one_method),                        # would only match localhost:8000/bears
        url(r'^bears/(?P<my_val>\d+)$', views.another_method),    # would match localhost:8000/bears/23
        url(r'^bears/(?P<name>\w+)/poke$', views.yet_another),    # would match localhost:8000/bears/pooh/poke
    	url(r'^(?P<id>[0-9]+)/(?P<color>\w+)$', views.one_more),  # would match localhost:8000/17/brown
-------------------------------------------------------------------------------------------------------------------
Many to Many
	this_book = Book.objects.get(id=4)	# retrieve an instance of a book
	this_publisher = Publisher.objects.get(id=2)	# retrieve an instance of a publisher
    
	# 2 options that do the same thing:
	this_publisher.books.add(this_book)		# add the book to this publisher's list of books
	# OR
	this_book.publishers.add(this_publisher)	# add the publisher to this book's list of publishers


	this_book = Book.objects.get(id=4)	# retrieve an instance of a book
	this_publisher = Publisher.objects.get(id=2)	# retrieve an instance of a publisher
    
	# 2 options that do the same thing:
	this_publisher.books.remove(this_book)		# remove the book from this publisher's list of books
	# OR
	this_book.publishers.remove(this_publisher)	# remove the publisher from this book's list of publishers
----------------------------------------------------------------------------------------------------------------------
One to many
	class Author(models.Model):
    		name = models.CharField(max_length=255)
    		created_at = models.DateTimeField(auto_now_add=True)
    		updated_at = models.DateTimeField(auto_now=True)
	class Book(models.Model):
    		title = models.CharField(max_length=255)
    		author = models.ForeignKey(Author, related_name="books")
    		created_at = models.DateTimeField(auto_now_add=True)
    		updated_at = models.DateTimeField(auto_now=True)

-----------------------------------------------------------------------------------------------------------------------
Restaurant Details

<QuerySet [{'id': 1, 'restaurant_name': "McDonald's", 'email': 'mcdonalds@gmail.com', 'phone_number': '4082242287', 'location': 'San Jose', 'password': 'password', 'created_at': datetime.datetime(2019, 9, 25, 6, 2, 54, 944926, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 9, 25, 21, 26, 32, 869686, tzinfo=<UTC>)},
 {'id': 2, 'restaurant_name': 'Taco Bell', 'email': 'tacobell@gmail.com', 'phone_number': '4098876654', 'location': 'Sunnyvale', 'password': '$2b$12$UpMdOy5Qzb6Bf41VhPE.jebou/4ZA6v/r6//rbllqgKzjrlze.gF.', 'created_at': datetime.datetime(2019, 9, 26, 18, 3, 48, 310176, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 9, 26, 18, 3, 48, 310176, tzinfo=<UTC>)}]>

Restaurant Taco

 a = Restaurant.objects.get(id=2)
>>> Item.objects.create(restaurant=a, item_name="Soft Taco", item_price=6, item_description="Soft side of the hard taco", item_img_url="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTcSvAkCVjWgW-F01A-AKA-KoswNaNCbi3wbygQBLY47tUq4IvM")
<Item: Item object>
>>> Item.objects.create(restaurant=a, item_name="3 Crunchy Tacos Combo", item_price=8, item_description="Combo of 3 tacos and a soda", item_img_url="https://www.tacobell.com/images/22603_3._3_crunchy_tacos_supreme_combo_269x269.jpg")
<Item: Item object>
>>> Item.objects.create(restaurant=a, item_name="Nachos Supreme", item_price=3, item_description="Tasty nachos with salsa", item_img_url="https://www.tacobell.com/images/22501_nachos_supreme_269x269.jpg")

Restaurant Mcd

{'id': 1, 'restaurant_id': 1, 'item_name': 'French Fries', 'item_price': 5.0, 'item_description': '230 Cal. Made of premium potatoes', 'item_img_url': 'https://www.mcdonalds.co.za/sites/default/files/productThumbnail/mcd-fries-large-fries.png', 'created_at': datetime.datetime(2019, 9, 25, 6, 12, 11, 808436, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 9, 25, 6, 12, 11, 808436, tzinfo=<UTC>)},
 {'id': 2, 'restaurant_id': 1, 'item_name': 'Cheese Burger', 'item_price': 8.0, 'item_description': '330Cal. 100% pure beef patty seasoned with just a pinch of salt and pepper.', 'item_img_url': 'https://www.mcdonalds.co.za/sites/default/files/productThumbnail/Double-cheese-burger-Transparent.png', 'created_at': datetime.datetime(2019, 9, 25, 6, 15, 19, 183036, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 9, 25, 6, 15, 19, 184063, tzinfo=<UTC>)},
 {'id': 5, 'restaurant_id': 1, 'item_name': 'Breakfast Wrap', 'item_price': 5.0, 'item_description': '400 Cal. At the breakfast station we fry the eggs and toast the muffins.', 'item_img_url': 'https://www.mcdonalds.co.za/sites/default/files/productThumbnail/brkfst%20wrap_0.jpg', 'created_at': datetime.datetime(2019, 9, 25, 6, 24, 55, 166727, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 9, 25, 6, 24, 55, 166727, tzinfo=<UTC>)}, 



	